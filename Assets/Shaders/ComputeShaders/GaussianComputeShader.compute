// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel CSMain

//// Create a RenderTexture with enableRandomWrite flag and set it
//// with cs.SetTexture
//RWTexture2D<float4> Result;

//[numthreads(8,8,1)]
//void CSMain (uint3 id : SV_DispatchThreadID)
//{
//    // TODO: insert actual code here!

//    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
//}

// Compute Shader for Gaussian Blur without Black Edge

#pragma kernel CSMain

Texture2D<float4> InputTexture;
RWTexture2D<float4> OutputTexture;

int BlurSize;

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 sum = float4(0.0, 0.0, 0.0, 0.0);
    float totalWeight = 0.0;

    for (int x = -BlurSize; x <= BlurSize; x++)
    {
        for (int y = -BlurSize; y <= BlurSize; y++)
        {
            if (id.x + x >= 0 && id.x + x < InputTexture.width && id.y + y >= 0 && id.y + y < InputTexture.height)
            {
                float weight = Gaussian(x, y, BlurSize);
                sum += InputTexture[id.xy + uint2(x, y)] * weight;
                totalWeight += weight;
            }
        }
    }

    OutputTexture[id.xy] = sum / totalWeight;
}

float Gaussian(int x, int y, int blurSize)
{
    float sigma = 1.0;
    float coeff = 1.0 / (2.0 * 3.14159 * sigma * sigma);
    float exponent = exp(-(float(x * x + y * y) / (2.0 * sigma * sigma)));
    return coeff * exponent;
}
